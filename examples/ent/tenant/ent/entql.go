// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/go-saas/saas/examples/ent/tenant/ent/post"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
		Type: "Post",
		Fields: map[string]*sqlgraph.FieldSpec{
			post.FieldTenantID:    {Type: field.TypeString, Column: post.FieldTenantID},
			post.FieldTitle:       {Type: field.TypeString, Column: post.FieldTitle},
			post.FieldDescription: {Type: field.TypeString, Column: post.FieldDescription},
			post.FieldDsn:         {Type: field.TypeString, Column: post.FieldDsn},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (pq *PostQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PostQuery builder.
func (pq *PostQuery) Filter() *PostFilter {
	return &PostFilter{pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PostMutation builder.
func (m *PostMutation) Filter() *PostFilter {
	return &PostFilter{m}
}

// PostFilter provides a generic filtering capability at runtime for PostQuery.
type PostFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PostFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(post.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PostFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(post.FieldTenantID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *PostFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(post.FieldTitle))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PostFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(post.FieldDescription))
}

// WhereDsn applies the entql string predicate on the dsn field.
func (f *PostFilter) WhereDsn(p entql.StringP) {
	f.Where(p.Field(post.FieldDsn))
}
