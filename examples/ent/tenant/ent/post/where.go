// Code generated by ent, DO NOT EDIT.

package post

import (
	"entgo.io/ent/dialect/sql"
	"github.com/go-saas/saas/examples/ent/tenant/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v *sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTenantID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDescription, v))
}

// Dsn applies equality check predicate on the "dsn" field. It's identical to DsnEQ.
func Dsn(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDsn, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v *sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v *sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...*sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...*sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v *sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v *sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v *sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v *sql.NullString) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v *sql.NullString) predicate.Post {
	vc := v.String
	return predicate.Post(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v *sql.NullString) predicate.Post {
	vc := v.String
	return predicate.Post(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v *sql.NullString) predicate.Post {
	vc := v.String
	return predicate.Post(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldTenantID))
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldTenantID))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v *sql.NullString) predicate.Post {
	vc := v.String
	return predicate.Post(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v *sql.NullString) predicate.Post {
	vc := v.String
	return predicate.Post(sql.FieldContainsFold(FieldTenantID, vc))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldDescription, v))
}

// DsnEQ applies the EQ predicate on the "dsn" field.
func DsnEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDsn, v))
}

// DsnNEQ applies the NEQ predicate on the "dsn" field.
func DsnNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDsn, v))
}

// DsnIn applies the In predicate on the "dsn" field.
func DsnIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDsn, vs...))
}

// DsnNotIn applies the NotIn predicate on the "dsn" field.
func DsnNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDsn, vs...))
}

// DsnGT applies the GT predicate on the "dsn" field.
func DsnGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDsn, v))
}

// DsnGTE applies the GTE predicate on the "dsn" field.
func DsnGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDsn, v))
}

// DsnLT applies the LT predicate on the "dsn" field.
func DsnLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDsn, v))
}

// DsnLTE applies the LTE predicate on the "dsn" field.
func DsnLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDsn, v))
}

// DsnContains applies the Contains predicate on the "dsn" field.
func DsnContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldDsn, v))
}

// DsnHasPrefix applies the HasPrefix predicate on the "dsn" field.
func DsnHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldDsn, v))
}

// DsnHasSuffix applies the HasSuffix predicate on the "dsn" field.
func DsnHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldDsn, v))
}

// DsnIsNil applies the IsNil predicate on the "dsn" field.
func DsnIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldDsn))
}

// DsnNotNil applies the NotNil predicate on the "dsn" field.
func DsnNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldDsn))
}

// DsnEqualFold applies the EqualFold predicate on the "dsn" field.
func DsnEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldDsn, v))
}

// DsnContainsFold applies the ContainsFold predicate on the "dsn" field.
func DsnContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldDsn, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
