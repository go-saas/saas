// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-saas/saas/examples/ent/shared/ent/predicate"
	"github.com/go-saas/saas/examples/ent/shared/ent/tenant"
	"github.com/go-saas/saas/examples/ent/shared/ent/tenantconn"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TenantUpdate) SetUpdateTime(t time.Time) *TenantUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDisplayName sets the "display_name" field.
func (tu *TenantUpdate) SetDisplayName(s string) *TenantUpdate {
	tu.mutation.SetDisplayName(s)
	return tu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDisplayName(s *string) *TenantUpdate {
	if s != nil {
		tu.SetDisplayName(*s)
	}
	return tu
}

// ClearDisplayName clears the value of the "display_name" field.
func (tu *TenantUpdate) ClearDisplayName() *TenantUpdate {
	tu.mutation.ClearDisplayName()
	return tu
}

// SetRegion sets the "region" field.
func (tu *TenantUpdate) SetRegion(s string) *TenantUpdate {
	tu.mutation.SetRegion(s)
	return tu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableRegion(s *string) *TenantUpdate {
	if s != nil {
		tu.SetRegion(*s)
	}
	return tu
}

// ClearRegion clears the value of the "region" field.
func (tu *TenantUpdate) ClearRegion() *TenantUpdate {
	tu.mutation.ClearRegion()
	return tu
}

// AddConnIDs adds the "conn" edge to the TenantConn entity by IDs.
func (tu *TenantUpdate) AddConnIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddConnIDs(ids...)
	return tu
}

// AddConn adds the "conn" edges to the TenantConn entity.
func (tu *TenantUpdate) AddConn(t ...*TenantConn) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddConnIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearConn clears all "conn" edges to the TenantConn entity.
func (tu *TenantUpdate) ClearConn() *TenantUpdate {
	tu.mutation.ClearConn()
	return tu
}

// RemoveConnIDs removes the "conn" edge to TenantConn entities by IDs.
func (tu *TenantUpdate) RemoveConnIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveConnIDs(ids...)
	return tu
}

// RemoveConn removes "conn" edges to TenantConn entities.
func (tu *TenantUpdate) RemoveConn(t ...*TenantConn) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveConnIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks[int, TenantMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := tenant.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.SetField(tenant.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.DisplayName(); ok {
		_spec.SetField(tenant.FieldDisplayName, field.TypeString, value)
	}
	if tu.mutation.DisplayNameCleared() {
		_spec.ClearField(tenant.FieldDisplayName, field.TypeString)
	}
	if value, ok := tu.mutation.Region(); ok {
		_spec.SetField(tenant.FieldRegion, field.TypeString, value)
	}
	if tu.mutation.RegionCleared() {
		_spec.ClearField(tenant.FieldRegion, field.TypeString)
	}
	if tu.mutation.ConnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ConnTable,
			Columns: []string{tenant.ConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenantconn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedConnIDs(); len(nodes) > 0 && !tu.mutation.ConnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ConnTable,
			Columns: []string{tenant.ConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenantconn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ConnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ConnTable,
			Columns: []string{tenant.ConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenantconn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TenantUpdateOne) SetUpdateTime(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDisplayName sets the "display_name" field.
func (tuo *TenantUpdateOne) SetDisplayName(s string) *TenantUpdateOne {
	tuo.mutation.SetDisplayName(s)
	return tuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDisplayName(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetDisplayName(*s)
	}
	return tuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (tuo *TenantUpdateOne) ClearDisplayName() *TenantUpdateOne {
	tuo.mutation.ClearDisplayName()
	return tuo
}

// SetRegion sets the "region" field.
func (tuo *TenantUpdateOne) SetRegion(s string) *TenantUpdateOne {
	tuo.mutation.SetRegion(s)
	return tuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableRegion(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetRegion(*s)
	}
	return tuo
}

// ClearRegion clears the value of the "region" field.
func (tuo *TenantUpdateOne) ClearRegion() *TenantUpdateOne {
	tuo.mutation.ClearRegion()
	return tuo
}

// AddConnIDs adds the "conn" edge to the TenantConn entity by IDs.
func (tuo *TenantUpdateOne) AddConnIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddConnIDs(ids...)
	return tuo
}

// AddConn adds the "conn" edges to the TenantConn entity.
func (tuo *TenantUpdateOne) AddConn(t ...*TenantConn) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddConnIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearConn clears all "conn" edges to the TenantConn entity.
func (tuo *TenantUpdateOne) ClearConn() *TenantUpdateOne {
	tuo.mutation.ClearConn()
	return tuo
}

// RemoveConnIDs removes the "conn" edge to TenantConn entities by IDs.
func (tuo *TenantUpdateOne) RemoveConnIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveConnIDs(ids...)
	return tuo
}

// RemoveConn removes "conn" edges to TenantConn entities.
func (tuo *TenantUpdateOne) RemoveConn(t ...*TenantConn) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveConnIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	tuo.defaults()
	return withHooks[*Tenant, TenantMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := tenant.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.SetField(tenant.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DisplayName(); ok {
		_spec.SetField(tenant.FieldDisplayName, field.TypeString, value)
	}
	if tuo.mutation.DisplayNameCleared() {
		_spec.ClearField(tenant.FieldDisplayName, field.TypeString)
	}
	if value, ok := tuo.mutation.Region(); ok {
		_spec.SetField(tenant.FieldRegion, field.TypeString, value)
	}
	if tuo.mutation.RegionCleared() {
		_spec.ClearField(tenant.FieldRegion, field.TypeString)
	}
	if tuo.mutation.ConnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ConnTable,
			Columns: []string{tenant.ConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenantconn.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedConnIDs(); len(nodes) > 0 && !tuo.mutation.ConnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ConnTable,
			Columns: []string{tenant.ConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenantconn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ConnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ConnTable,
			Columns: []string{tenant.ConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenantconn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
