// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/goxiaoy/go-saas/examples/ent/shared/ent/tenant"
	"github.com/goxiaoy/go-saas/examples/ent/shared/ent/tenantconn"
)

// TenantCreate is the builder for creating a Tenant entity.
type TenantCreate struct {
	config
	mutation *TenantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tc *TenantCreate) SetCreateTime(t time.Time) *TenantCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TenantCreate) SetNillableCreateTime(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TenantCreate) SetUpdateTime(t time.Time) *TenantCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TenantCreate) SetNillableUpdateTime(t *time.Time) *TenantCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TenantCreate) SetName(s string) *TenantCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetDisplayName sets the "display_name" field.
func (tc *TenantCreate) SetDisplayName(s string) *TenantCreate {
	tc.mutation.SetDisplayName(s)
	return tc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (tc *TenantCreate) SetNillableDisplayName(s *string) *TenantCreate {
	if s != nil {
		tc.SetDisplayName(*s)
	}
	return tc
}

// SetRegion sets the "region" field.
func (tc *TenantCreate) SetRegion(s string) *TenantCreate {
	tc.mutation.SetRegion(s)
	return tc
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (tc *TenantCreate) SetNillableRegion(s *string) *TenantCreate {
	if s != nil {
		tc.SetRegion(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TenantCreate) SetID(i int) *TenantCreate {
	tc.mutation.SetID(i)
	return tc
}

// AddConnIDs adds the "conn" edge to the TenantConn entity by IDs.
func (tc *TenantCreate) AddConnIDs(ids ...int) *TenantCreate {
	tc.mutation.AddConnIDs(ids...)
	return tc
}

// AddConn adds the "conn" edges to the TenantConn entity.
func (tc *TenantCreate) AddConn(t ...*TenantConn) *TenantCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddConnIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tc *TenantCreate) Mutation() *TenantMutation {
	return tc.mutation
}

// Save creates the Tenant in the database.
func (tc *TenantCreate) Save(ctx context.Context) (*Tenant, error) {
	var (
		err  error
		node *Tenant
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TenantCreate) SaveX(ctx context.Context) *Tenant {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TenantCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TenantCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TenantCreate) defaults() {
	if _, ok := tc.mutation.CreateTime(); !ok {
		v := tenant.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		v := tenant.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TenantCreate) check() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Tenant.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Tenant.update_time"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tenant.name"`)}
	}
	return nil
}

func (tc *TenantCreate) sqlSave(ctx context.Context) (*Tenant, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (tc *TenantCreate) createSpec() (*Tenant, *sqlgraph.CreateSpec) {
	var (
		_node = &Tenant{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tenant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenant.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenant.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.DisplayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldDisplayName,
		})
		_node.DisplayName = value
	}
	if value, ok := tc.mutation.Region(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldRegion,
		})
		_node.Region = value
	}
	if nodes := tc.mutation.ConnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ConnTable,
			Columns: []string{tenant.ConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenantconn.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (tc *TenantCreate) OnConflict(opts ...sql.ConflictOption) *TenantUpsertOne {
	tc.conflict = opts
	return &TenantUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tc *TenantCreate) OnConflictColumns(columns ...string) *TenantUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertOne{
		create: tc,
	}
}

type (
	// TenantUpsertOne is the builder for "upsert"-ing
	//  one Tenant node.
	TenantUpsertOne struct {
		create *TenantCreate
	}

	// TenantUpsert is the "OnConflict" setter.
	TenantUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *TenantUpsert) SetCreateTime(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *TenantUpsert) UpdateCreateTime() *TenantUpsert {
	u.SetExcluded(tenant.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantUpsert) SetUpdateTime(v time.Time) *TenantUpsert {
	u.Set(tenant.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantUpsert) UpdateUpdateTime() *TenantUpsert {
	u.SetExcluded(tenant.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *TenantUpsert) SetName(v string) *TenantUpsert {
	u.Set(tenant.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsert) UpdateName() *TenantUpsert {
	u.SetExcluded(tenant.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *TenantUpsert) SetDisplayName(v string) *TenantUpsert {
	u.Set(tenant.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *TenantUpsert) UpdateDisplayName() *TenantUpsert {
	u.SetExcluded(tenant.FieldDisplayName)
	return u
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *TenantUpsert) ClearDisplayName() *TenantUpsert {
	u.SetNull(tenant.FieldDisplayName)
	return u
}

// SetRegion sets the "region" field.
func (u *TenantUpsert) SetRegion(v string) *TenantUpsert {
	u.Set(tenant.FieldRegion, v)
	return u
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *TenantUpsert) UpdateRegion() *TenantUpsert {
	u.SetExcluded(tenant.FieldRegion)
	return u
}

// ClearRegion clears the value of the "region" field.
func (u *TenantUpsert) ClearRegion() *TenantUpsert {
	u.SetNull(tenant.FieldRegion)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TenantUpsertOne) UpdateNewValues() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tenant.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(tenant.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Tenant.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TenantUpsertOne) Ignore() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertOne) DoNothing() *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreate.OnConflict
// documentation for more info.
func (u *TenantUpsertOne) Update(set func(*TenantUpsert)) *TenantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *TenantUpsertOne) SetCreateTime(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateCreateTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantUpsertOne) SetUpdateTime(v time.Time) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateUpdateTime() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *TenantUpsertOne) SetName(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateName() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *TenantUpsertOne) SetDisplayName(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateDisplayName() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *TenantUpsertOne) ClearDisplayName() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDisplayName()
	})
}

// SetRegion sets the "region" field.
func (u *TenantUpsertOne) SetRegion(v string) *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *TenantUpsertOne) UpdateRegion() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateRegion()
	})
}

// ClearRegion clears the value of the "region" field.
func (u *TenantUpsertOne) ClearRegion() *TenantUpsertOne {
	return u.Update(func(s *TenantUpsert) {
		s.ClearRegion()
	})
}

// Exec executes the query.
func (u *TenantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantCreateBulk is the builder for creating many Tenant entities in bulk.
type TenantCreateBulk struct {
	config
	builders []*TenantCreate
	conflict []sql.ConflictOption
}

// Save creates the Tenant entities in the database.
func (tcb *TenantCreateBulk) Save(ctx context.Context) ([]*Tenant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tenant, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TenantCreateBulk) SaveX(ctx context.Context) []*Tenant {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TenantCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TenantCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Tenant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (tcb *TenantCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantUpsertBulk {
	tcb.conflict = opts
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcb *TenantCreateBulk) OnConflictColumns(columns ...string) *TenantUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TenantUpsertBulk{
		create: tcb,
	}
}

// TenantUpsertBulk is the builder for "upsert"-ing
// a bulk of Tenant nodes.
type TenantUpsertBulk struct {
	create *TenantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenant.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TenantUpsertBulk) UpdateNewValues() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tenant.FieldID)
				return
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(tenant.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Tenant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TenantUpsertBulk) Ignore() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUpsertBulk) DoNothing() *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantCreateBulk.OnConflict
// documentation for more info.
func (u *TenantUpsertBulk) Update(set func(*TenantUpsert)) *TenantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *TenantUpsertBulk) SetCreateTime(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateCreateTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantUpsertBulk) SetUpdateTime(v time.Time) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateUpdateTime() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *TenantUpsertBulk) SetName(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateName() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *TenantUpsertBulk) SetDisplayName(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateDisplayName() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateDisplayName()
	})
}

// ClearDisplayName clears the value of the "display_name" field.
func (u *TenantUpsertBulk) ClearDisplayName() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearDisplayName()
	})
}

// SetRegion sets the "region" field.
func (u *TenantUpsertBulk) SetRegion(v string) *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.SetRegion(v)
	})
}

// UpdateRegion sets the "region" field to the value that was provided on create.
func (u *TenantUpsertBulk) UpdateRegion() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.UpdateRegion()
	})
}

// ClearRegion clears the value of the "region" field.
func (u *TenantUpsertBulk) ClearRegion() *TenantUpsertBulk {
	return u.Update(func(s *TenantUpsert) {
		s.ClearRegion()
	})
}

// Exec executes the query.
func (u *TenantUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
