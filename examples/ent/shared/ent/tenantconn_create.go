// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/goxiaoy/go-saas/examples/ent/shared/ent/tenantconn"
)

// TenantConnCreate is the builder for creating a TenantConn entity.
type TenantConnCreate struct {
	config
	mutation *TenantConnMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tcc *TenantConnCreate) SetCreateTime(t time.Time) *TenantConnCreate {
	tcc.mutation.SetCreateTime(t)
	return tcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tcc *TenantConnCreate) SetNillableCreateTime(t *time.Time) *TenantConnCreate {
	if t != nil {
		tcc.SetCreateTime(*t)
	}
	return tcc
}

// SetUpdateTime sets the "update_time" field.
func (tcc *TenantConnCreate) SetUpdateTime(t time.Time) *TenantConnCreate {
	tcc.mutation.SetUpdateTime(t)
	return tcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tcc *TenantConnCreate) SetNillableUpdateTime(t *time.Time) *TenantConnCreate {
	if t != nil {
		tcc.SetUpdateTime(*t)
	}
	return tcc
}

// SetKey sets the "key" field.
func (tcc *TenantConnCreate) SetKey(s string) *TenantConnCreate {
	tcc.mutation.SetKey(s)
	return tcc
}

// SetValue sets the "value" field.
func (tcc *TenantConnCreate) SetValue(s string) *TenantConnCreate {
	tcc.mutation.SetValue(s)
	return tcc
}

// Mutation returns the TenantConnMutation object of the builder.
func (tcc *TenantConnCreate) Mutation() *TenantConnMutation {
	return tcc.mutation
}

// Save creates the TenantConn in the database.
func (tcc *TenantConnCreate) Save(ctx context.Context) (*TenantConn, error) {
	var (
		err  error
		node *TenantConn
	)
	tcc.defaults()
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantConnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TenantConnCreate) SaveX(ctx context.Context) *TenantConn {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TenantConnCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TenantConnCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TenantConnCreate) defaults() {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		v := tenantconn.DefaultCreateTime()
		tcc.mutation.SetCreateTime(v)
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		v := tenantconn.DefaultUpdateTime()
		tcc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TenantConnCreate) check() error {
	if _, ok := tcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TenantConn.create_time"`)}
	}
	if _, ok := tcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TenantConn.update_time"`)}
	}
	if _, ok := tcc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "TenantConn.key"`)}
	}
	if _, ok := tcc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "TenantConn.value"`)}
	}
	return nil
}

func (tcc *TenantConnCreate) sqlSave(ctx context.Context) (*TenantConn, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tcc *TenantConnCreate) createSpec() (*TenantConn, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantConn{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tenantconn.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenantconn.FieldID,
			},
		}
	)
	_spec.OnConflict = tcc.conflict
	if value, ok := tcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenantconn.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := tcc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenantconn.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := tcc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenantconn.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := tcc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenantconn.FieldValue,
		})
		_node.Value = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenantConn.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantConnUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (tcc *TenantConnCreate) OnConflict(opts ...sql.ConflictOption) *TenantConnUpsertOne {
	tcc.conflict = opts
	return &TenantConnUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenantConn.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcc *TenantConnCreate) OnConflictColumns(columns ...string) *TenantConnUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TenantConnUpsertOne{
		create: tcc,
	}
}

type (
	// TenantConnUpsertOne is the builder for "upsert"-ing
	//  one TenantConn node.
	TenantConnUpsertOne struct {
		create *TenantConnCreate
	}

	// TenantConnUpsert is the "OnConflict" setter.
	TenantConnUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreateTime sets the "create_time" field.
func (u *TenantConnUpsert) SetCreateTime(v time.Time) *TenantConnUpsert {
	u.Set(tenantconn.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *TenantConnUpsert) UpdateCreateTime() *TenantConnUpsert {
	u.SetExcluded(tenantconn.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantConnUpsert) SetUpdateTime(v time.Time) *TenantConnUpsert {
	u.Set(tenantconn.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantConnUpsert) UpdateUpdateTime() *TenantConnUpsert {
	u.SetExcluded(tenantconn.FieldUpdateTime)
	return u
}

// SetKey sets the "key" field.
func (u *TenantConnUpsert) SetKey(v string) *TenantConnUpsert {
	u.Set(tenantconn.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TenantConnUpsert) UpdateKey() *TenantConnUpsert {
	u.SetExcluded(tenantconn.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *TenantConnUpsert) SetValue(v string) *TenantConnUpsert {
	u.Set(tenantconn.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *TenantConnUpsert) UpdateValue() *TenantConnUpsert {
	u.SetExcluded(tenantconn.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TenantConn.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TenantConnUpsertOne) UpdateNewValues() *TenantConnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(tenantconn.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TenantConn.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TenantConnUpsertOne) Ignore() *TenantConnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantConnUpsertOne) DoNothing() *TenantConnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantConnCreate.OnConflict
// documentation for more info.
func (u *TenantConnUpsertOne) Update(set func(*TenantConnUpsert)) *TenantConnUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantConnUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *TenantConnUpsertOne) SetCreateTime(v time.Time) *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *TenantConnUpsertOne) UpdateCreateTime() *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantConnUpsertOne) SetUpdateTime(v time.Time) *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantConnUpsertOne) UpdateUpdateTime() *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetKey sets the "key" field.
func (u *TenantConnUpsertOne) SetKey(v string) *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TenantConnUpsertOne) UpdateKey() *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *TenantConnUpsertOne) SetValue(v string) *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *TenantConnUpsertOne) UpdateValue() *TenantConnUpsertOne {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *TenantConnUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantConnCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantConnUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantConnUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantConnUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantConnCreateBulk is the builder for creating many TenantConn entities in bulk.
type TenantConnCreateBulk struct {
	config
	builders []*TenantConnCreate
	conflict []sql.ConflictOption
}

// Save creates the TenantConn entities in the database.
func (tccb *TenantConnCreateBulk) Save(ctx context.Context) ([]*TenantConn, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TenantConn, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantConnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TenantConnCreateBulk) SaveX(ctx context.Context) []*TenantConn {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TenantConnCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TenantConnCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenantConn.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantConnUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (tccb *TenantConnCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantConnUpsertBulk {
	tccb.conflict = opts
	return &TenantConnUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenantConn.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tccb *TenantConnCreateBulk) OnConflictColumns(columns ...string) *TenantConnUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TenantConnUpsertBulk{
		create: tccb,
	}
}

// TenantConnUpsertBulk is the builder for "upsert"-ing
// a bulk of TenantConn nodes.
type TenantConnUpsertBulk struct {
	create *TenantConnCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TenantConn.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *TenantConnUpsertBulk) UpdateNewValues() *TenantConnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(tenantconn.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TenantConn.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TenantConnUpsertBulk) Ignore() *TenantConnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantConnUpsertBulk) DoNothing() *TenantConnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantConnCreateBulk.OnConflict
// documentation for more info.
func (u *TenantConnUpsertBulk) Update(set func(*TenantConnUpsert)) *TenantConnUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantConnUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *TenantConnUpsertBulk) SetCreateTime(v time.Time) *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *TenantConnUpsertBulk) UpdateCreateTime() *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *TenantConnUpsertBulk) SetUpdateTime(v time.Time) *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TenantConnUpsertBulk) UpdateUpdateTime() *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetKey sets the "key" field.
func (u *TenantConnUpsertBulk) SetKey(v string) *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TenantConnUpsertBulk) UpdateKey() *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *TenantConnUpsertBulk) SetValue(v string) *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *TenantConnUpsertBulk) UpdateValue() *TenantConnUpsertBulk {
	return u.Update(func(s *TenantConnUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *TenantConnUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenantConnCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantConnCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantConnUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
